type Error = variant { NotFound : record { msg : text } };
type Result = variant { Ok : UserProfile; Err : Error };
type TransactionRecord = record {
  id : nat64;
  involved_parties : vec nat64;
  date : nat64;
  amount : float64;
};
type UserProfile = record {
  id : nat64;
  name : text;
  role : UserRole;
  stake_in_dao : float64;
  transaction_history : vec TransactionRecord;
};
type UserRole = variant { Farmer; Consumer };
service : {
  create_user_profile : (text, UserRole, float64) -> (opt UserProfile);
  delete_user_profile : (nat64) -> (Result);
  read_user_profile : (nat64) -> (Result) query;
  update_user_profile : (nat64, text, float64) -> (Result);
}
